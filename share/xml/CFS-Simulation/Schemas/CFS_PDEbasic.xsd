<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://www.cfs++.org/simulation"
  xmlns="http://www.cfs++.org/simulation"
  xmlns:cfs="http://www.cfs++.org/simulation"
  elementFormDefault="qualified">

  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      Coupled Field Solver project CFS++
      Schema for basic PDE description and boundary conditions
      All other PDE descriptions are derived from this type
    </xsd:documentation>
  </xsd:annotation>


  <!-- ******************************************************************** -->
  <!--   Definition of basic PDE data type -->
  <!-- ******************************************************************** -->

  <!-- This is an abstract basic type so that it cannot appear in an -->
  <!-- instance document -->
  <xsd:complexType name="DT_PDEBasic" abstract="true">

    <xsd:attribute name="feSpaceFormulation" type="DT_FeFormulationBasic" use="optional"
      default="default"/>
    <!-- This attribute is used to refer to the corresponding linearSystem-element -->
    <xsd:attribute name="pdeFormulation" type="DT_FeFormulationBasic" use="optional"
      default="default"/>
    <xsd:attribute name="systemId" type="xsd:token" use="optional" default="default"/>
  </xsd:complexType>


  <!-- ******************************************************************** -->
  <!--   Definition of basic PDE element -->
  <!-- ******************************************************************** -->

  <!-- This element is abstract in order to force substitution -->
  <!-- by the derived specialised PDE elements -->
  <xsd:element name="PDEBasic" type="DT_PDEBasic" abstract="true"/>


  <!-- ******************************************************************** -->
  <!--   Definition of standard type for boundary conditions -->
  <!-- ******************************************************************** -->

  <!-- Base element type for specifying boundary conditions -->
  <xsd:complexType name="DT_BCBasic">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType"> </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--   Definition of data from external fields                            -->
  <!-- ******************************************************************** -->

  <!-- Depend Type of grid coeffunction -->
  <xsd:simpleType name="DT_CoefGridDependType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="GENERAL"/>
      <xsd:enumeration value="SPACE"/>
      <xsd:enumeration value="TIMEFREQ"/>
      <xsd:enumeration value="CONST"/>
      <xsd:enumeration value="INVSOURCE"/>
      <xsd:enumeration value="INVMEASURE"/>
    </xsd:restriction>
  </xsd:simpleType>


  <!-- Mode of interpolation -->
  <xsd:simpleType name="DT_CoefGridInterpolMode">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="standard"/>
      <xsd:enumeration value="conservative"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="DT_BaseGridData">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:choice>
          <xsd:element name="defaultGrid">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="globalFactor" maxOccurs="unbounded" minOccurs="0" default="1"
                  type="xsd:token"/>
              </xsd:sequence>
              <xsd:attribute name="quantity" use="required"/>
              <xsd:attribute name="dependtype" type="DT_CoefGridDependType" use="required"/>
              <xsd:attribute name="measureNodes" type="xsd:string"/>
              <xsd:attribute name="sequenceStep" type="xsd:integer" use="optional" default="1"/>
              <xsd:attribute name="snapToCFSTimeStep" type="xsd:boolean" use="optional"
                default="false"/>
              <xsd:attribute name="verboseSum" type="xsd:boolean" use="optional" default="false"/>
              <xsd:attribute name="verboseTimeFreqFactor" type="xsd:boolean" use="optional"
                default="true"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="externalGrid">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="notInterpolatedNodesFile" maxOccurs="1" minOccurs="0" default=""
                  type="xsd:token"/>
                <xsd:element name="globalFactor" maxOccurs="unbounded" minOccurs="0" default="1"
                  type="xsd:token"/>
                <xsd:element name="globalTolerance" maxOccurs="1" minOccurs="1" type="xsd:double"/>
                <xsd:element name="localTolerance" maxOccurs="1" minOccurs="1" type="xsd:double"/>
                <xsd:element name="xyPlane" minOccurs="0" maxOccurs="1">
                  <xsd:complexType>
                    <xsd:attribute name="z" type="xsd:double" use="required"/>
                    <xsd:attribute name="tolerance" type="DT_NonNegFloat" use="optional"
                      default="1e-12"/>
                  </xsd:complexType>
                </xsd:element>
                <xsd:element name="regionList">
                  <xsd:complexType>
                    <xsd:sequence>
                      <xsd:element name="region" minOccurs="1" maxOccurs="unbounded">
                        <xsd:complexType>
                          <xsd:attribute name="srcRegionName" type="xsd:token" use="required"/>
                          <xsd:attribute name="regionFactor" type="xsd:token" default="1.0"
                            use="optional"/>
                        </xsd:complexType>
                      </xsd:element>
                    </xsd:sequence>
                  </xsd:complexType>
                </xsd:element>
              </xsd:sequence>
              <xsd:attribute name="gridId" type="xsd:token" use="required"/>
              <xsd:attribute name="inputId" type="xsd:token" use="required"/>
              <xsd:attribute name="quantity" use="required"/>
              <xsd:attribute name="dependtype" type="DT_CoefGridDependType" use="required"/>
              <xsd:attribute name="interpolation" type="DT_CoefGridInterpolMode" use="optional"
                default="standard"/>
              <xsd:attribute name="sequenceStep" type="xsd:integer" use="optional" default="1"/>
              <xsd:attribute name="verbose" type="xsd:boolean" use="optional" default="false"/>
              <xsd:attribute name="snapToCFSTimeStep" type="xsd:boolean" use="optional"
                default="false"/>
              <xsd:attribute name="verboseSum" type="xsd:boolean" use="optional" default="false"/>
              <xsd:attribute name="verboseTimeFreqFactor" type="xsd:boolean" use="optional"
                default="true"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="dofs" type="xsd:token" use="optional" default="all"/>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- ******************************************************************** -->
  <!--   Definition of data from iterative coupled field problems           -->
  <!-- ******************************************************************** -->
  <xsd:complexType name="DT_IterCplData">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:sequence>
          <xsd:element name="quantity">
            <xsd:complexType>
              <xsd:attribute name="name" type="xsd:token" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="pdeName" type="xsd:token" use="required"/>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--   Definition of data from iterative coupled field problems           -->
  <!-- ******************************************************************** -->
  <xsd:complexType name="DT_IterCplNonLinData">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:sequence>
          <xsd:element name="quantity">
            <xsd:complexType>
              <xsd:attribute name="name" type="xsd:token" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="pdeName" type="xsd:token" use="required"/>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- ******************************************************************** -->
  <!--   Definition of data from external simulations                       -->
  <!-- ******************************************************************** -->
  <xsd:complexType name="DT_ExternalSimulation">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:sequence>

          <xsd:element name="quantity">
            <xsd:complexType>
              <xsd:attribute name="name" type="xsd:token" use="required"/>
              <xsd:attribute name="pdeName" type="xsd:token" use="required"/>
            </xsd:complexType>
          </xsd:element>

          <!-- Determine time / frequency behavior-->
          <xsd:element name="timeFreqMapping">
            <xsd:annotation>
              <xsd:documentation>Determines how time/frequency steps from the sequence step are used.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:choice>

                <!-- a) fixed time / frequency step -->
                <xsd:element name="constant">
                  <xsd:annotation>
                    <xsd:documentation>use a specific step.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:complexType>
                    <xsd:attribute name="step" type="xsd:nonNegativeInteger" use="optional"
                      default="1"/>
                  </xsd:complexType>
                </xsd:element>

                <!-- b) continuous mapping -->
                <xsd:element name="continuous">
                  <xsd:annotation>
                    <xsd:documentation>adjust value depending on the current time/frequency value</xsd:documentation>
                  </xsd:annotation>
                  <xsd:complexType>
                    <xsd:attribute name="interpolation" use="optional" default="linear">
                      <xsd:annotation>
                        <xsd:documentation>interpolate data from the steps of the sequenceStep</xsd:documentation>
                      </xsd:annotation>
                      <xsd:simpleType>
                        <xsd:restriction base="xsd:token">
                          <xsd:enumeration value="nearestNeighbor"/>
                          <xsd:enumeration value="linear"/>
                        </xsd:restriction>
                      </xsd:simpleType>
                    </xsd:attribute>
                    <xsd:attribute name="offset" type="xsd:float" use="optional" default="0.0"/>
                  </xsd:complexType>
                </xsd:element>
              </xsd:choice>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="inputId" type="xsd:token" use="required"/>
        <xsd:attribute name="sequenceStep" type="xsd:integer" use="optional" default="1"/>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- ******************************************************************** -->
  <!--   Definition of data from previous multisequence step                -->
  <!-- ******************************************************************** -->
  <xsd:complexType name="DT_SequenceStep">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:sequence>

          <xsd:element name="quantity">
            <xsd:complexType>
              <xsd:attribute name="name" type="xsd:token" use="required"/>
              <xsd:attribute name="pdeName" type="xsd:token" use="required"/>
            </xsd:complexType>
          </xsd:element>

          <!-- Determine time / frequency behavior-->
          <xsd:element name="timeFreqMapping">
            <xsd:complexType>
              <xsd:choice>

                <!-- a) fixed time / frequency step -->
                <xsd:element name="constant">
                  <xsd:complexType>
                    <xsd:attribute name="step" type="xsd:integer" use="optional" default="1"/>
                  </xsd:complexType>
                </xsd:element>

                <!-- b) continuous mapping -->
                <xsd:element name="continuous">
                  <xsd:complexType>
                    <xsd:attribute name="interpolation" use="optional" default="linear">
                      <xsd:simpleType>
                        <xsd:restriction base="xsd:token">
                          <xsd:enumeration value="nearestNeighbor"/>
                          <xsd:enumeration value="linear"/>
                        </xsd:restriction>
                      </xsd:simpleType>
                    </xsd:attribute>
                    <xsd:attribute name="offset" type="xsd:float" use="optional" default="0.0"/>
                  </xsd:complexType>
                </xsd:element>
              </xsd:choice>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="index" type="xsd:integer" use="optional" default="1"/>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--  Definition of scattered data on point clouds (measured, CSV, etc.)  -->
  <!-- ******************************************************************** -->
  <xsd:complexType name="DT_ScatteredData">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:attribute name="quantityId" use="required">
          <xsd:annotation>
            <xsd:documentation xml:lang="en">
              Id of the input quantity in the scattered data input tag.              
            </xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ************************************************************************ -->
  <!--  More technical variant of scattered data. Apply value for node numbers  -->
  <!-- ************************************************************************ -->
  <xsd:complexType name="DT_FileData">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">
        Provide a text file with node number and node value in separate lines. See attribute 'missing' to control what shall happen
        when there is not information for every node in the text file.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="file" type="xsd:token" use="required" >
      <xsd:annotation>
        <xsd:documentation xml:lang="en">
          Text file with node 'number separator value' lines. See 'missing' if necessary for all nodes in the simulation.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="missing" use="optional" default="warning">
      <xsd:annotation>
        <xsd:documentation xml:lang="en">
          In case the file does not contain content for every node for right hand side, 'missing' controls the behavior.
          Either cfs breaks with an error, issues a warning (and uses zero) or simply uses zero silently.
        </xsd:documentation>
      </xsd:annotation>
      <xsd:simpleType>
        <xsd:restriction base="xsd:token">
          <!-- throw an exception about incomplete file -->
          <xsd:enumeration value="exception"/>
          <!-- issue an single warning and set value to zero -->
          <xsd:enumeration value="warning"/>
          <!-- silently set value to zero -->
          <xsd:enumeration value="zero"/>
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:attribute>
  </xsd:complexType>

  <!-- ************************************************************************ -->
  <!--  python based input source. Based on python kernel = file defined in domument root  -->
  <!-- ************************************************************************ -->
  <xsd:complexType name="DT_PythonCoef">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">
         Give python function to be called within python script in cfs main python element.
         The options are for the optional init function call              
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
       <xsd:element name="option" minOccurs="0" maxOccurs="unbounded" type="DT_PythonOption"/>
    </xsd:sequence>
    <xsd:attribute name="init" type="xsd:token" use="optional" >
      <xsd:annotation>
        <xsd:documentation xml:lang="en">
           optional call if init function when generating the coef function. Has the options as parameter              
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="function" type="xsd:token" use="required" >
      <xsd:annotation>
        <xsd:documentation xml:lang="en">
           This python function is called on every evaluation for the current coordinates. Does not get other paramters              
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="normalize" type="xsd:boolean" default="true" >
      <xsd:annotation>
        <xsd:documentation xml:lang="en">
           Shall openCFS do a normalization by number of entries or not              
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="by_coord" type="xsd:boolean" default="true" >
      <xsd:annotation>
        <xsd:documentation xml:lang="en">
           Shall the function be called by node coordinate or one based node number?              
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>


  <!-- ******************************************************************* -->
  <!--   Definition of standard types for BCs and RHS values               -->
  <!-- ******************************************************************* -->
  <!-- Base element type for specifying boundary conditions and RHS values-->
  <xsd:complexType name="DT_BcBasic">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:sequence>
          <xsd:element name="regionList" minOccurs="0" maxOccurs="1">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="region" minOccurs="1" maxOccurs="unbounded">
                  <xsd:complexType>
                    <xsd:attribute name="name" type="xsd:token" use="required"/>
                  </xsd:complexType>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:token" use="optional"/>
        <xsd:attribute name="coordSysId" type="xsd:token" use="optional" default="default"/>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************* -->
  <!--   Homogeneous Boundary Conditions                                   -->
  <!-- ******************************************************************* -->

  <!-- Homogeneous scalar boundary condition -->
  <xsd:complexType name="DT_BcHomScalar">
    <xsd:complexContent>
      <xsd:extension base="DT_BcBasic"> </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- Homogeneous vector-valued boundary condition -->
  <xsd:complexType name="DT_BcHomVector">
    <xsd:complexContent>
      <xsd:extension base="DT_BcHomScalar">
        <!-- single components given -->
        <xsd:sequence>
          <xsd:element name="comp" minOccurs="1" maxOccurs="unbounded">
            <xsd:complexType>
              <xsd:attribute name="dof" type="xsd:token" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- Homogeneous tensor-valued boundary condition -->
  <xsd:complexType name="DT_BcHomTensor">
    <xsd:complexContent>
      <xsd:extension base="DT_BcHomVector"> </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************* -->
  <!--   Inhomogeneous Boundary Conditions / RHS Excitation                -->
  <!-- ******************************************************************* -->

  <!-- Inhomogeneous scalar boundary condition / RHS value -->
  <xsd:complexType name="DT_BcInhomScalar">
    <xsd:complexContent>
      <xsd:extension base="DT_BcHomScalar">
        <xsd:choice>
          <!-- Read Data from external Grids -->
          <xsd:element name="grid" minOccurs="0" maxOccurs="1" type="DT_BaseGridData"/>

          <!-- Obtain data from iterative coupling -->
          <xsd:element name="coupling" minOccurs="0" maxOccurs="1" type="DT_IterCplData"/>

          <!-- External HDF5 file -->
          <xsd:element name="externalSimulation" maxOccurs="1" type="DT_ExternalSimulation"/>

          <!-- =========================== -->
          <!--  Scattered data from CSV -->
          <!-- =========================== -->
          <xsd:element name="scatteredData" maxOccurs="1" type="DT_ScatteredData">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">
                Scattered data coming from CSV files.
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>

          <!-- text file with node number and values to be applied for the nodes
               See CoefFunctionFileData -->
          <xsd:element name="fileData" maxOccurs="1" type="DT_FileData">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">
                Text file with node number and values to be applied for the nodes.
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>

          <!-- python function which calculates the properties -->
          <xsd:element name="python" maxOccurs="1" type="DT_PythonCoef">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">
                Python script defined by kernel root python file to calculate right hand side data 
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>

          <!-- Same Simulation, other sequenceStep -->
          <xsd:element name="sequenceStep" maxOccurs="1" type="DT_SequenceStep"/>
        </xsd:choice>
        <xsd:attribute name="value" type="xsd:token" use="optional"/>
        <xsd:attribute name="phase" type="xsd:token" use="optional" default="0.0"/>
        <xsd:attribute name="volumeRegion" type="xsd:token" use="optional"/>
        <xsd:attribute name="isComplex" type="xsd:boolean" use="optional" default="false"/>
        <xsd:attribute name="harmonic" type="xsd:token" use="optional" default="1"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>



  <!-- Inhomogeneous vector-valued boundary condition / RHS value -->
  <xsd:complexType name="DT_BcInhomScalarCoupled">
    <xsd:complexContent>
      <xsd:extension base="DT_BcBasic">
        <xsd:choice>
          <!-- =========================== -->
          <!--  B) Iterative Coupling      -->
          <!-- =========================== -->
          <xsd:element name="coupling" maxOccurs="1" type="DT_IterCplData"/>

        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- Inhomogeneous vector-valued boundary condition / RHS value -->
  <xsd:complexType name="DT_BcInhomVector">
    <xsd:complexContent>
      <xsd:extension base="DT_BcHomScalar">
        <xsd:choice>
          <!-- =========================== -->
          <!--  A) Analytical Description  -->
          <!-- =========================== -->
          <!-- 1) complete vector given -->
          <xsd:sequence>
            <xsd:element name="values" type="DT_TokenList" minOccurs="1" maxOccurs="1"/>
            <xsd:element name="phase" type="DT_TokenList" minOccurs="0" maxOccurs="1"/>
          </xsd:sequence>

          <!-- 2) single components given -->
          <xsd:sequence>
            <xsd:element name="comp" minOccurs="1" maxOccurs="unbounded">
              <xsd:complexType>
                <xsd:attribute name="dof" type="xsd:token" use="required"/>
                <xsd:attribute name="value" type="xsd:token" use="required"/>
                <xsd:attribute name="phase" type="xsd:token" use="optional" default="0.0"/>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>

          <!-- =========================== -->
          <!--  B) Iterative Coupling      -->
          <!-- =========================== -->
          <xsd:element name="coupling" maxOccurs="1" type="DT_IterCplData"/>

          <!-- =========================== -->
          <!--  C) External Grid           -->
          <!-- =========================== -->
          <xsd:element name="grid" maxOccurs="1" type="DT_BaseGridData">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">
                Read values from external, nodal grid.
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>

          <!-- =========================== -->
          <!--  D) External HDF5 file      -->
          <!-- =========================== -->
          <xsd:element name="externalSimulation" maxOccurs="1" type="DT_ExternalSimulation"/>

          <!-- =========================== -->
          <!--  E) Other Sequence Step      -->
          <!-- =========================== -->
          <xsd:element name="sequenceStep" maxOccurs="1" type="DT_SequenceStep"/>

          <!-- =========================== -->
          <!--  F) Scattered data from CSV -->
          <!-- =========================== -->
          <xsd:element name="scatteredData" maxOccurs="1" type="DT_ScatteredData">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">
                Scattered data coming from CSV files.
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>

          <!-- text file with node number and values to be applied for the nodes
               See CoefFunctionFileData -->
          <xsd:element name="fileData" maxOccurs="1" type="DT_FileData"/>

          
          <!-- python function which calculates the properties -->
          <xsd:element name="python" maxOccurs="1" type="DT_PythonCoef">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">
                Python script defined by kernel root python file to calculate nodal data 
              </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- Inhomogeneous tensor-valued boundary condition / RHS value -->
  <xsd:complexType name="DT_BcInhomTensor">
    <xsd:complexContent>
      <xsd:extension base="DT_BcHomScalar">
        <xsd:choice>

          <!-- 1) complete vector given -->
          <xsd:sequence>
            <xsd:element name="values" type="DT_TokenList" minOccurs="1" maxOccurs="1"/>
            <xsd:element name="phase" type="DT_TokenList" minOccurs="0" maxOccurs="1"/>
          </xsd:sequence>

          <!-- 2) single components given -->
          <xsd:sequence>
            <xsd:element name="comp" minOccurs="1" maxOccurs="unbounded">
              <xsd:complexType>
                <xsd:attribute name="dof" type="xsd:token" use="required"/>
                <xsd:attribute name="value" type="xsd:token" use="required"/>
                <xsd:attribute name="phase" type="xsd:token" use="optional" default="0.0"/>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>

        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************* -->
  <!--   Periodic Boundary Conditions                                   -->
  <!-- ******************************************************************* -->
  <xsd:complexType name="DT_BcPeriodic">
    <xsd:complexContent>
      <xsd:extension base="DT_BCBasic">
        <xsd:attribute name="master" type="xsd:token" use="required"/>
        <xsd:attribute name="slave" type="xsd:token" use="required"/>
        <xsd:attribute name="quantity" type="xsd:token" use="required"/>
        <xsd:attribute name="dof" type="xsd:token" use="optional"/>
        <xsd:attribute name="fixedCoords" type="xsd:token" use="optional"/>
        <xsd:attribute name="tolerance" type="DT_NonNegFloat" use="optional" default="1e-6"/>
        <xsd:attribute name="coordSysId" type="xsd:token" use="optional" default="default"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************* -->
  <!--   Bloch periodic boundary conditions                                -->
  <!-- ******************************************************************* -->
  <xsd:complexType name="DT_BcBlochPeriodicFull">
    <xsd:annotation>
      <xsd:documentation>
        Defines Bloch-periodic boundary conditions with a factor diven by its absolute value and the argument, i.e. phase (IN RADIANS!). 
        One can also specify the approach the boundary conditions are to be handled: eiter mortar of Nitsche.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="DT_BCBasic">
        <xsd:sequence>
          <xsd:element name="region" maxOccurs="unbounded">
            <xsd:complexType>
              <xsd:attribute name="name" type="xsd:token" use="required"/>
              <xsd:attribute name="polyId" use="optional" default="default"/>
              <xsd:attribute name="integId" use="optional" default="default"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute default="1.0" name="factor_value" type="xsd:token"/>
        <xsd:attribute default="0.0" name="factor_phase" type="xsd:token"/>
        <xsd:attribute name="formulation" type="DT_NMGFormulationBasic" use="optional"
          default="Nitsche"/>
        <xsd:attribute name="nitscheFactor" type="xsd:double" use="optional" default="100"/>
        <xsd:attribute name="nitscheFactorDamping" type="xsd:double" use="optional" default="1e-2"/>
        <xsd:attribute name="lagrangeMultType" use="optional" default="standard">
          <xsd:simpleType>
            <xsd:restriction base="xsd:token">
              <xsd:enumeration value="standard"/>
              <xsd:enumeration value="dualDiscont"/>
              <xsd:enumeration value="dualCubic"/>
            </xsd:restriction>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="crossPointHandling" type="DT_CFSBool" use="optional" default="no"/>
        <xsd:attribute name="movingMortar" type="DT_CFSBool" use="optional" default="no"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- ******************************************************************** -->
  <!--   Definition of initial state -->
  <!-- ******************************************************************** -->

  <!-- Base element type for specifying the initial state of a PDE, i.e.
       its intial value for the primary quantity and its time derivatives -->
  <xsd:complexType name="DT_InitialState">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:choice minOccurs="0">
          <!-- 1) Same simulation, different multisequence step -->
          <xsd:element name="sequenceStep" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                Prescribe the values of a previous secquence step.
                index: Index of the sequence step.
                step: Step to be read in.
                extrapolateStatic: If the previous step has been a static one and this bool is set, we assume that all previous steps needed for the timescheme are equal to the static one.
              </xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:attribute name="index" type="xsd:positiveInteger" use="required"/>
              <xsd:attribute name="step" type="xsd:integer" use="optional" default="-1"/>
              <xsd:attribute name="extrapolateStatic" type="DT_CFSBool" use="optional" default="yes"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--   Definition of initial fields -->
  <!-- ******************************************************************** -->

  <!-- Base element type for specifying the initial state of a PDE, i.e.
       its intial value for the primary quantity and its time derivatives -->
  <xsd:complexType name="DT_InitialField">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:choice minOccurs="0">
          <!-- 1) Same simulation, different multisequence step -->
          <xsd:element name="scalar" minOccurs="0">
            <xsd:complexType>
              <xsd:attribute name="value" type="xsd:token" use="required"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="vector" minOccurs="0">
            <xsd:complexType>
              <!-- 2) single components given -->
              <xsd:sequence>
                <xsd:element name="comp" minOccurs="1" maxOccurs="unbounded">
                  <xsd:complexType>
                    <xsd:attribute name="dof" type="xsd:token" use="required"/>
                    <xsd:attribute name="value" type="xsd:token" use="required"/>
                    <xsd:attribute name="phase" type="xsd:token" use="optional" default="0.0"/>
                  </xsd:complexType>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
        <xsd:attribute name="id" type="xsd:token" use="required"/>
        <xsd:attribute name="quantity" type="xsd:token" use="required"/>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--   Definition of standard type for nonlinearity -->
  <!-- ******************************************************************** -->

  <!-- Base element type for specifying boundary conditions -->
  <xsd:complexType name="DT_NonLinBasic">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:attribute name="id" type="xsd:token" use="required"/>
        <xsd:attribute name="model" type="xsd:token" default="nonlinearCurve" use="optional"/>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  
  <xsd:complexType name="DT_NonLinBC">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:attribute name="id" type="xsd:token" use="required"/>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="DT_matDependencyBasic">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:attribute name="id" type="xsd:token" use="required"/>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- ******************************************************************** -->
  <!--   Definition of basic function space types -->
  <!-- ******************************************************************** -->
  <xsd:simpleType name="DT_FeFormulationBasic">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="default"/>
      <xsd:enumeration value="H1"/>
      <xsd:enumeration value="HCurl"/>
      <xsd:enumeration value="HDiv"/>
      <xsd:enumeration value="L2"/>
      <xsd:enumeration value="TaylorHood"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- ******************************************************************** -->
  <!--   Definition of non-matching grid formulations -->
  <!-- ******************************************************************** -->
  <xsd:simpleType name="DT_NMGFormulationBasic">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="none"/>
      <xsd:enumeration value="Nitsche"/>
      <xsd:enumeration value="Mortar"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!--********************************************************************
        Definition of Basic Datatype for non-conforming interfaces
      ******************************************************************** -->
  <xsd:complexType name="DT_NcInterfaceList">
    <xsd:sequence>
      <xsd:element name="ncInterface" minOccurs="1" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:attribute name="name" type="xsd:token" use="required"/>
          <xsd:attribute name="formulation" type="DT_NMGFormulationBasic" use="optional"
            default="Mortar"/>
          <xsd:attribute name="nitscheFactor" type="xsd:double" use="optional" default="100"/>
          <xsd:attribute name="nitscheFactorDamping" type="xsd:double" use="optional" default="1e-2"/>
          <xsd:attribute name="lagrangeMultType" use="optional" default="standard">
            <xsd:simpleType>
              <xsd:restriction base="xsd:token">
                <xsd:enumeration value="standard"/>
                <xsd:enumeration value="dualDiscont"/>
                <xsd:enumeration value="dualCubic"/>
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:attribute>
          <xsd:attribute name="crossPointHandling" type="DT_CFSBool" use="optional" default="no"/>
          <xsd:attribute name="movingMortar" type="DT_CFSBool" use="optional" default="no"/>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--   Definition of standard type for damping -->
  <!-- ******************************************************************** -->

  <!-- Base element type for specifying boundary conditions -->
  <xsd:complexType name="DT_DampingBasic">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:attribute name="id" type="xsd:token" use="required"/>
        <!--xsd:attribute name="aPML" type="DT_CFSBool" use="optional" default="no"/-->
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--   Definition of standard type for flow data -->
  <!-- ******************************************************************** -->

  <!-- Base element type for specifying boundary conditions -->
  <xsd:complexType name="DT_FlowBasic">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:attribute name="id" type="xsd:token" use="required"/>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- ******************************************************************* -->
  <!--   Definition of PML damping -->
  <!-- ******************************************************************* -->
  <xsd:simpleType name="DT_PMLFormulation">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="classic"/>
      <xsd:enumeration value="shifted"/>
      <xsd:enumeration value="curvilinear"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- Definition of pml damping type -->
  <xsd:complexType name="DT_DampingPML">
    <xsd:complexContent>
      <xsd:extension base="DT_DampingBasic">
        <xsd:sequence>

          <!-- Reference coordinate system, in which PML damping is defined -->
          <xsd:element name="coordSysId" minOccurs="0" maxOccurs="1" type="xsd:token"/>

          <!-- Geometric definition of region -->
          <xsd:element name="propRegion" minOccurs="0" maxOccurs="1">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="direction" minOccurs="1" maxOccurs="3">
                  <xsd:complexType>
                    <xsd:attribute name="comp" type="DT_CosyCompType" use="required"/>
                    <xsd:attribute name="min" type="xsd:token" use="required"/>
                    <xsd:attribute name="max" type="xsd:token" use="required"/>
                  </xsd:complexType>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>

          <!-- Type of PML -->
          <xsd:element name="type" minOccurs="0" maxOccurs="1" default="inverseDist">
            <xsd:annotation>
              <xsd:documentation>can be a constant factor, quadratically increasing, inverse distance increasing or a smooth increasing function</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:token">
                <xsd:enumeration value="constant"/>
                <xsd:enumeration value="quadDist"/>
                <xsd:enumeration value="inverseDist"/>
                <xsd:enumeration value="smoothDamp"/>
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>

          <!-- Damping factor -->
          <xsd:element name="dampFactor" type="xsd:token" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>Has to be chosen appropriate to remain stable; for inverse distance type choose 1.0</xsd:documentation>
            </xsd:annotation>
          </xsd:element>

          <!-- Stretching factor for CFS-PML -->
          <xsd:element name="scalingCoef" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>
                A coefficient in the scaling term of the CFS-PML metric. Namely, the coefficient k0:
                s(x, w) = k(x) + sigma(x)/( alpha(x) + i*w ); k(x) = 1 + k0*Fk(x)
                If k0 = 0, then there's no scaling in wavelength.
              </xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:attribute name="value" type="xsd:token" default="0" use="optional"/>
              <xsd:attribute name="power" type="xsd:token" default="0" use="optional"/>
            </xsd:complexType>
          </xsd:element>

          <!-- Frequency shift for CFS-PML -->
          <xsd:element name="frqShiftCoef" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>
                A coefficient in the frequency shift term of the CFS-PML metric. Namely, the coefficient alpha0:
                s(x, w) = k(x) + sigma(x)/( alpha(x) + i*w ); alpha(x) = alpha0*Fa(x)
                If alpha0 = 0, then there's no frequency shift.
              </xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:attribute name="value" type="xsd:token" default="0" use="optional"/>
              <xsd:attribute name="power" type="xsd:token" default="0" use="optional"/>
            </xsd:complexType>
          </xsd:element>

          <!--xsd:element name="aPML"  type="DT_CFSBool" minOccurs="0" maxOccurs="1" default="no"/-->
        </xsd:sequence>

        <xsd:attribute name="formulation" type="DT_PMLFormulation" default="classic" use="optional"
        />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- ******************************************************************* -->
  <!--   Definition of Mapping -->
  <!-- ******************************************************************* -->

  <!-- Definition of Mapping damping type -->
  <xsd:complexType name="DT_DampingMapping">
    <xsd:complexContent>
      <xsd:extension base="DT_DampingBasic">
        <xsd:sequence>

          <!-- Reference coordinate system, in which Mapping damping is defined -->
          <xsd:element name="coordSysId" minOccurs="0" maxOccurs="1" type="xsd:token"/>

          <!-- Geometric definition of region -->
          <xsd:element name="propRegion" minOccurs="0" maxOccurs="1">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="direction" minOccurs="1" maxOccurs="3">
                  <xsd:complexType>
                    <xsd:attribute name="comp" type="DT_CosyCompType" use="required"/>
                    <xsd:attribute name="min" type="xsd:token" use="required"/>
                    <xsd:attribute name="max" type="xsd:token" use="required"/>
                  </xsd:complexType>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>

          <!-- Type of Mapping -->
          <xsd:element name="type" minOccurs="0" maxOccurs="1" default="tangens">
            <xsd:annotation>
              <xsd:documentation>can be a constant factor, quadratically increasing, inverse distance increasing or a smooth increasing function</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
              <xsd:restriction base="xsd:token">
                <xsd:enumeration value="tangens"/>
                <xsd:enumeration value="rational"/>
                <xsd:enumeration value="exponential"/>
              </xsd:restriction>
            </xsd:simpleType>
          </xsd:element>

          <!-- Damping factor -->
          <xsd:element name="dampFactor" type="xsd:token" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>Has to be chosen appropriate to remain stable; for inverse distance type choose 1.0</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>

      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--   Definition of basic result data type -->
  <!-- ******************************************************************** -->

  <!-- Please insert documentation here -->
  <xsd:complexType name="DT_BasicResult" abstract="true">
    <xsd:attribute name="complexFormat" type="DT_ComplexFormat" use="optional" default="amplPhase"/>
  </xsd:complexType>


  <!-- ******************************************************************** -->
  <!--   Definition of basic result storing data type -->
  <!-- ******************************************************************** -->

  <!-- Please insert documentation here -->
  <xsd:complexType name="DT_ResultSavingType" abstract="true">
    <xsd:attribute name="saveBegin" type="xsd:token" default="0"/>
    <xsd:attribute name="saveEnd" type="xsd:token" default="2147483647"/>
    <xsd:attribute name="saveInc" type="xsd:token" default="1"/>
  </xsd:complexType>


  <!-- ******************************************************************** -->
  <!--   Definition of nodal result type -->
  <!-- ******************************************************************** -->

  <!-- Please insert documentation here -->
  <xsd:complexType name="DT_NodeResult">
    <xsd:complexContent>
      <xsd:extension base="DT_BasicResult">
        <xsd:sequence minOccurs="1">

          <!-- 1.) Definition by 'regionList' -->
          <xsd:choice minOccurs="1" maxOccurs="1">

            <!-- choice for a) several results regions-->
            <xsd:element name="regionList" minOccurs="0" maxOccurs="1">
              <xsd:complexType>
                <xsd:complexContent>
                  <xsd:extension base="DT_ResultSavingType">
                    <xsd:sequence>
                      <xsd:element name="region" type="DT_SingleRegionResultDescr" minOccurs="1"
                        maxOccurs="unbounded"/>
                    </xsd:sequence>
                  </xsd:extension>
                </xsd:complexContent>
              </xsd:complexType>
            </xsd:element>

            <!-- choice for b) all regions-->
            <xsd:element name="allRegions" type="DT_AllRegionResultDescr" minOccurs="1"
              maxOccurs="1"/>
          </xsd:choice>

          <!-- 2.) Definition by named nodes -->
          <xsd:element name="nodeList" minOccurs="0">
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="DT_ResultSavingType">
                  <xsd:sequence minOccurs="1" maxOccurs="1">
                    <xsd:element name="nodes" type="DT_HistResultDescr" minOccurs="1"
                      maxOccurs="unbounded"/>
                  </xsd:sequence>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>

        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--   Definition of element result type -->
  <!-- ******************************************************************** -->

  <!-- Please insert documentation here -->
  <xsd:complexType name="DT_ElemResult">
    <xsd:complexContent>
      <xsd:extension base="DT_BasicResult">
        <xsd:sequence minOccurs="1">

          <!-- 1.) Definition by 'regionList' -->
          <xsd:choice minOccurs="0" maxOccurs="1">

            <!-- choice for a) several results regions-->
            <xsd:element name="regionList" minOccurs="0" maxOccurs="1">
              <xsd:complexType>
                <xsd:complexContent>
                  <xsd:extension base="DT_ResultSavingType">
                    <xsd:sequence>
                      <xsd:element name="region" type="DT_SingleRegionResultDescr" minOccurs="1"
                        maxOccurs="unbounded"/>
                    </xsd:sequence>
                  </xsd:extension>
                </xsd:complexContent>
              </xsd:complexType>
            </xsd:element>

            <!-- choice for b) all regions-->
            <xsd:element name="allRegions" type="DT_AllRegionResultDescr" minOccurs="1"
              maxOccurs="1"/>
          </xsd:choice>

          <!-- 2.) Definition by named elements -->
          <xsd:element name="elemList" minOccurs="0" maxOccurs="1">
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="DT_ResultSavingType">
                  <xsd:sequence minOccurs="0" maxOccurs="1">
                    <xsd:element name="elems" type="DT_HistResultDescr" minOccurs="1"
                      maxOccurs="unbounded"/>
                  </xsd:sequence>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>

        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- ******************************************************************** -->
  <!--   Definition of surface element result type -->
  <!-- ******************************************************************** -->

  <!-- Please insert documentation here -->
  <xsd:complexType name="DT_SurfElemResult">
    <xsd:complexContent>
      <xsd:extension base="DT_BasicResult">
        <xsd:sequence minOccurs="1">

          <!-- 1.) Definition by 'regionList' -->
          <xsd:element name="surfRegionList" minOccurs="0" maxOccurs="1">
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="DT_ResultSavingType">
                  <xsd:sequence>
                    <xsd:element name="surfRegion" type="DT_SingleSurfRegionResultDescr"
                      minOccurs="1" maxOccurs="unbounded"/>
                  </xsd:sequence>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>

          <!-- 2.) Definition by named elements -->
          <xsd:element name="surfElemList" minOccurs="0" maxOccurs="1">
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="DT_ResultSavingType">
                  <xsd:sequence minOccurs="0" maxOccurs="1">
                    <xsd:element name="surfElems" type="DT_SurfElemHistResultDescr" minOccurs="1"
                      maxOccurs="unbounded"/>
                  </xsd:sequence>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>

        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>


  <!-- ******************************************************************** -->
  <!--   Definition of region result type -->
  <!-- ******************************************************************** -->

  <!-- Please insert documentation here -->
  <xsd:complexType name="DT_RegionResult">
    <xsd:complexContent>
      <xsd:extension base="DT_BasicResult">

        <!-- 1.) Definition by 'regionList' -->
        <xsd:choice minOccurs="1" maxOccurs="1">

          <!-- choice for a) several results regions-->
          <xsd:element name="regionList" minOccurs="0" maxOccurs="1">
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="DT_ResultSavingType">
                  <xsd:sequence>
                    <xsd:element name="region" type="DT_SingleRegionResultDescr" minOccurs="1"
                      maxOccurs="unbounded"/>
                  </xsd:sequence>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>

          <!-- choice for b) all regions-->
          <xsd:element name="allRegions" type="DT_AllRegionResultDescr" minOccurs="1" maxOccurs="1"
          />
        </xsd:choice>

      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <xsd:complexType name="DT_RegionAverageResult">
    <xsd:complexContent>
      <xsd:extension base="DT_RegionResult">
        <xsd:annotation>
          <xsd:documentation>Computes volume averaged field results.
Fields are integrated over the volume region using the defined integration scheme for the PDE's unknowns.
The result is divided by the total volume of the region, yielding the volume average.
          </xsd:documentation>
        </xsd:annotation>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <!-- ******************************************************************** -->
  <!--   Definition of surface region result type -->
  <!-- ******************************************************************** -->

  <!-- Please insert documentation here -->
  <xsd:complexType name="DT_SurfRegionResult">
    <xsd:complexContent>
      <xsd:extension base="DT_BasicResult">
        <xsd:sequence minOccurs="1">

          <!-- 1.) Definition by 'regionList' -->
          <xsd:element name="surfRegionList" minOccurs="1" maxOccurs="1">
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="DT_ResultSavingType">
                  <xsd:sequence>
                    <xsd:element name="surfRegion" type="DT_SingleSurfRegionResultDescr"
                      minOccurs="1" maxOccurs="unbounded"/>
                  </xsd:sequence>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>

        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--   Definition of coil result -->
  <!-- ******************************************************************** -->

  <!-- Please but documentation here -->
  <xsd:complexType name="DT_CoilResult">
    <xsd:complexContent>
      <xsd:extension base="DT_BasicResult">
        <xsd:sequence>
          <!-- 1.) Definition by 'coilList' -->
          <xsd:element name="coilList" minOccurs="1" maxOccurs="1">
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="DT_ResultSavingType">
                  <xsd:sequence>
                    <xsd:element name="coil" type="DT_CoilResultDescr" minOccurs="1"
                      maxOccurs="unbounded"/>
                  </xsd:sequence>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--   Definition of field interpolation -->
  <!-- ******************************************************************** -->
  <xsd:complexType name="DT_SensorArrayResult">
    <xsd:choice>
      <xsd:element name="parametric" minOccurs="0" maxOccurs="1">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="list" minOccurs="0" maxOccurs="3">
              <xsd:complexType>
                <xsd:attribute name="comp" type="DT_CosyCompType" use="required"/>
                <xsd:attribute name="start" type="xsd:token" use="required"/>
                <xsd:attribute name="stop" type="xsd:token" use="required"/>
                <xsd:attribute name="inc" type="xsd:token" use="required"/>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="coordinateFile" minOccurs="0" maxOccurs="3">
        <xsd:complexType>
          <xsd:attribute name="fileName" type="xsd:token" use="required"/>
          <xsd:attribute name="delimiter" default="," type="xsd:token" use="optional"/>
          <xsd:attribute name="commentCharacter" default="#" type="xsd:token" use="optional"/>
          <xsd:attribute name="xCoordColumn" default="1" type="xsd:token" use="optional"/>
          <xsd:attribute name="yCoordColumn" default="2" type="xsd:token" use="optional"/>
          <xsd:attribute name="zCoordColumn" default="3" type="xsd:token" use="optional"/>
        </xsd:complexType>
      </xsd:element>
    </xsd:choice>
    <xsd:attribute name="coordSysId" type="xsd:token" default="default" use="optional"/>
    <xsd:attribute name="fileName" default="xsd:token"/>
    <xsd:attribute name="csv" default="no" type="DT_CFSBool">
      <xsd:annotation>
        <xsd:documentation xml:lang="en">
          Format output file as comma separated values which can be read directly into ParaView.
          
          The Matlab/Octave code to read such files is: matrix = csvread('vel-line.csv',1,0);
          
          For Python refer to http://matplotlib.org/api/mlab_api.html#matplotlib.mlab.csv2rec or
          http://docs.python.org/2/library/csv.html
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="delimiter" default="," type="xsd:token">
      <xsd:annotation>
        <xsd:documentation xml:lang="en">
          The delimiter character for the CSV file can be defined here. By default a comma is used.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>


  <!-- ******************************************************************** -->
  <!--   Definition of single region result description type -->
  <!-- ******************************************************************** -->

  <!-- Please insert documentation here -->
  <xsd:complexType name="DT_SingleRegionResultDescr">
    <xsd:attribute name="name" type="xsd:token" use="required"/>
    <xsd:attribute name="postProcId" type="xsd:token" default=""/>
    <xsd:attribute name="outputIds" type="xsd:token" default=""/>
    <xsd:attribute name="writeResult" type="DT_CFSBool" default="yes"/>
    <xsd:attribute name="writeAsHistResult" type="DT_CFSBool" default="yes"/>
  </xsd:complexType>


  <!-- ******************************************************************** -->
  <!--   Definition of all region result description type -->
  <!-- ******************************************************************** -->

  <!-- Please insert documentation here -->
  <xsd:complexType name="DT_AllRegionResultDescr">
    <xsd:complexContent>
      <xsd:extension base="DT_ResultSavingType">
        <xsd:attribute name="postProcId" type="xsd:token" default=""/>
        <xsd:attribute name="outputIds" type="xsd:token" default=""/>
        <xsd:attribute name="writeResult" type="DT_CFSBool" default="yes"/>
        <xsd:attribute name="writeAsHistResult" type="DT_CFSBool" default="yes"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--   Definition of single surface region result description type -->
  <!-- ******************************************************************** -->

  <!-- Please insert documentation here -->
  <xsd:complexType name="DT_SingleSurfRegionResultDescr">
    <xsd:attribute name="name" type="xsd:token" use="required"/>
    <xsd:attribute name="neighborRegion" type="xsd:token" use="optional" default=""/>
    <xsd:attribute name="postProcId" type="xsd:token" default=""/>
    <xsd:attribute name="outputIds" type="xsd:token" default=""/>
    <xsd:attribute name="writeResult" type="DT_CFSBool" default="yes"/>
    <xsd:attribute name="writeAsHistResult" type="DT_CFSBool" default="yes"/>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--   Definition of history result description type -->
  <!-- ******************************************************************** -->

  <!-- Please insert documentation here -->
  <xsd:complexType name="DT_HistResultDescr">
    <xsd:attribute name="name" type="xsd:token" use="required"/>
    <xsd:attribute name="postProcId" type="xsd:token" default=""/>
    <xsd:attribute name="outputIds" type="xsd:token" default=""/>
    <xsd:attribute name="writeResult" type="DT_CFSBool" default="yes"/>
    <xsd:attribute name="writeAsHistResult" type="DT_CFSBool" default="yes"/>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--   Definition of surface element history result description type -->
  <!-- ******************************************************************** -->

  <!-- Please insert documentation here -->
  <xsd:complexType name="DT_SurfElemHistResultDescr">
    <xsd:attribute name="name" type="xsd:token" use="required"/>
    <xsd:attribute name="neighborRegion" type="xsd:token" use="optional" default=""/>
    <xsd:attribute name="postProcId" type="xsd:token" default=""/>
    <xsd:attribute name="outputIds" type="xsd:token" default=""/>
    <xsd:attribute name="writeResult" type="DT_CFSBool" default="yes"/>
    <xsd:attribute name="writeAsHistResult" type="DT_CFSBool" default="yes"/>
  </xsd:complexType>

  <!-- ******************************************************************** -->
  <!--   Definition of coil result description  -->
  <!-- ******************************************************************** -->

  <!-- Please put documentation here -->
  <xsd:complexType name="DT_CoilResultDescr">
    <xsd:attribute name="id" type="xsd:token" use="required"/>
    <xsd:attribute name="postProcId" type="xsd:token" default=""/>
    <xsd:attribute name="outputIds" type="xsd:token" default=""/>
    <xsd:attribute name="writeResult" type="DT_CFSBool" default="yes"/>
    <xsd:attribute name="writeAsHistResult" type="DT_CFSBool" default="yes"/>
  </xsd:complexType>

  <!-- ***************************************************** -->
  <!--   Definition for material dependencies in PDEs        -->
  <!-- ***************************************************** -->
  <xsd:complexType name="DT_matDependency">
    <xsd:complexContent>
      <xsd:extension base="DT_matDependencyCoupled"> </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="DT_matDependencyCoupled">
    <xsd:complexContent>
      <xsd:extension base="DT_matDepBasic">
        <xsd:choice>
          <!-- =========================== -->
          <!--  A) Iterative Coupling      -->
          <!-- =========================== -->
          <xsd:element name="coupling" maxOccurs="1" type="DT_IterCplData"/>
          <!-- =========================== -->
          <!--  B) External file           -->
          <!-- =========================== -->
          <xsd:element name="externalSimulation" maxOccurs="1" type="DT_ExternalSimulation"/>
          <!-- =========================== -->
          <!--  C) Sequence step           -->
          <!-- =========================== -->
          <xsd:element name="sequenceStep" maxOccurs="1" type="DT_SequenceStep"/>
          <!-- =========================== -->
          <!--  D) External grid           -->
          <!-- =========================== -->
          <!-- Read Data from external Grids -->
          <xsd:element name="grid" maxOccurs="1" type="DT_BaseGridData"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="DT_matDepBasic">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:attribute name="id" type="xsd:token" use="required"/>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- ******************************************************************* -->
  <!--   Definition of syntax for specifying coils -->
  <!-- ******************************************************************* -->

  <!-- data type for specifying external inputs, similar to DT_BcInhomScalar -->
  <xsd:complexType name="DT_ExtCurrentDens">
    <xsd:choice>
      <!-- Read Data from external Grids -->
      <xsd:element name="grid" minOccurs="0" maxOccurs="1" type="DT_BaseGridData"/>

      <!-- Obtain data from iterative coupling -->
      <xsd:element name="coupling" minOccurs="0" maxOccurs="1" type="DT_IterCplData"/>

      <!-- External HDF5 file -->
      <xsd:element name="externalSimulation" maxOccurs="1" type="DT_ExternalSimulation"/>

      <!-- =========================== -->
      <!--  Scattered data from CSV -->
      <!-- =========================== -->
      <xsd:element name="scatteredData" maxOccurs="1" type="DT_ScatteredData">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">
                Scattered data coming from CSV files.
              </xsd:documentation>
        </xsd:annotation>
      </xsd:element>

      <!-- Same Simulation, other sequenceStep -->
      <xsd:element name="sequenceStep" maxOccurs="1" type="DT_SequenceStep"/>
    </xsd:choice>
    <xsd:attribute default="yes" name="normalise" type="DT_CFSBool"/>
  </xsd:complexType>

  <!-- Data type for basic coil -->
  <xsd:complexType name="DT_MagCoil">
    <xsd:sequence>
      <!-- Define source of coil (current, voltage) -->
      <xsd:choice>
        <!-- Classical coil definition for transient/harmonic/static analysis but not multiharmonic-->
        <xsd:element name="source" minOccurs="0" maxOccurs="1">
          <xsd:complexType>
            <xsd:attribute name="type" use="required">
              <xsd:simpleType>
                <xsd:restriction base="xsd:token">
                  <xsd:enumeration value="current"/>
                  <xsd:enumeration value="voltage"/>
                  <xsd:enumeration value="specialvoltage"> </xsd:enumeration>
                  <xsd:enumeration value="specialcurrent"/>
                  <xsd:enumeration value="external">
                    <xsd:annotation>
                      <xsd:documentation xml:lang="en">
                        Not only the direction of the current density is specified from external data, but the total current density.
                        Requires the use of external data in the direction of the part(s).
                      </xsd:documentation>
                    </xsd:annotation>
                  </xsd:enumeration>
                </xsd:restriction>
              </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="value" type="xsd:token" default="0.0"/>
            <xsd:attribute name="phase" type="xsd:token" default="0.0"/>
          </xsd:complexType>
        </xsd:element>

        <!-- Definition for multiharmonic coil-->
        <xsd:element name="sourceMultiharmonic" minOccurs="0" maxOccurs="1">
          <xsd:complexType>
            <xsd:sequence>
              <xsd:element name="harmonic" minOccurs="1" maxOccurs="unbounded">
                <xsd:annotation>
                  <xsd:documentation>
                    Only define the POSITIVE HARMONIC excitation (including zero harmonic)!!
                  </xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                  <xsd:attribute name="harmonic" type="xsd:integer" default="1"/>
                  <xsd:attribute name="value" type="xsd:token" default="0.0"/>
                  <xsd:attribute name="phase" type="xsd:token" default="0.0"/>
                </xsd:complexType>
              </xsd:element>
            </xsd:sequence>
            <xsd:attribute name="type" use="required">
              <xsd:simpleType>
                <xsd:restriction base="xsd:token">
                  <xsd:enumeration value="current"/>
                  <xsd:enumeration value="voltage"/>
                  <xsd:enumeration value="specialvoltage"/>
                  <xsd:enumeration value="external">
                    <xsd:annotation>
                      <xsd:documentation xml:lang="en">
                        Not only the direction of the current density is specified from external data, but the total current density.
                        Requires the use of external data in the direction of the part(s).
                      </xsd:documentation>
                    </xsd:annotation>
                  </xsd:enumeration>
                </xsd:restriction>
              </xsd:simpleType>
            </xsd:attribute>
          </xsd:complexType>
        </xsd:element>
      </xsd:choice>


      <!-- Define parts of coil -->
      <xsd:element name="part" minOccurs="1" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:sequence>

            <!-- Region this part is defined by -->
            <xsd:element name="regionList">
              <xsd:complexType>
                <xsd:sequence>
                  <xsd:element name="region" minOccurs="1" maxOccurs="unbounded">
                    <xsd:complexType>
                      <xsd:attribute name="name" type="xsd:token" use="required"/>
                    </xsd:complexType>
                  </xsd:element>
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>

            <!--Specify current direction -->
            <xsd:element name="direction" minOccurs="1" maxOccurs="1">
              <xsd:complexType>
                <xsd:choice>
                  <!-- a) analytic current direction -->
                  <xsd:element name="analytic">
                    <xsd:complexType>
                      <xsd:sequence>
                        <xsd:element name="comp" minOccurs="0" maxOccurs="unbounded">
                          <xsd:complexType>
                            <xsd:attribute name="dof" type="xsd:token" use="required"/>
                            <xsd:attribute name="value" type="xsd:token" use="required"/>
                            <xsd:attribute name="phase" type="xsd:token" use="optional"
                              default="0.0"/>
                          </xsd:complexType>
                        </xsd:element>
                      </xsd:sequence>
                      <xsd:attribute name="coordSysId" type="xsd:token" use="optional"
                        default="default"/>
                      <xsd:attribute default="yes" name="normalise" type="DT_CFSBool"/>
                    </xsd:complexType>
                  </xsd:element>

                  <!-- b) current direction given by input / output areas-->
                  <xsd:element name="automatic">
                    <xsd:complexType>
                      <xsd:sequence>
                        <xsd:element name="inputSurfaceList" minOccurs="0" maxOccurs="1">
                          <xsd:complexType>
                            <xsd:sequence>
                              <xsd:element name="surface">
                                <xsd:complexType>
                                  <xsd:attribute name="name" type="xsd:token"/>
                                </xsd:complexType>
                              </xsd:element>
                            </xsd:sequence>
                          </xsd:complexType>
                        </xsd:element>
                        <!-- output surfaces (optional) -->
                        <xsd:element name="outputSurfaceList" minOccurs="0" maxOccurs="1">
                          <xsd:complexType>
                            <xsd:sequence>
                              <xsd:element name="surface">
                                <xsd:complexType>
                                  <xsd:attribute name="name" type="xsd:token"/>
                                </xsd:complexType>
                              </xsd:element>
                            </xsd:sequence>
                          </xsd:complexType>
                        </xsd:element>
                      </xsd:sequence>
                    </xsd:complexType>
                  </xsd:element>

                  <!-- c) external -->
                  <xsd:element name="external" minOccurs="0" maxOccurs="1" type="DT_ExtCurrentDens"
                  />
                </xsd:choice>
                <xsd:attribute name="orientation" default="1" type="DT_DirFlag" use="optional"/>
                <!--xsd:attribute name="uniformCurrentDensity" default="yes" type="DT_CFSBool"
                  use="optional"/-->
              </xsd:complexType>
            </xsd:element>



            <!--Specify the reading of grad(V)*grad(V) (needed in special A-V formulation) -->
            <xsd:element name="gradV_in_gradV" minOccurs="0" maxOccurs="1">
              <xsd:complexType>
                <xsd:choice>
                  <!-- c) external -->
                  <xsd:element name="external" minOccurs="0" maxOccurs="1" type="DT_ExtCurrentDens"
                  />
                </xsd:choice>
              </xsd:complexType>
            </xsd:element>


            <!-- Define layout of coil. Here we allow for two different
                 definitions:
                 a) number of turns and fill factor
                 b) cross section of single winding
            -->
            <xsd:choice>
              <xsd:element name="windingTurns">
                <xsd:complexType>
                  <xsd:attribute name="number" type="xsd:positiveInteger" use="required"/>
                  <!--xsd:attribute name="fillFactor" type="DT_PosFloat" default="1.0"/-->
                </xsd:complexType>
              </xsd:element>
              <xsd:element name="wireCrossSection">
                <xsd:complexType>
                  <xsd:attribute name="area" type="xsd:token" use="required"/>
                  <!--xsd:attribute name="fillFactor" type="DT_PosFloat" default="1.0"/-->
                  <!-- eanable topology optimization of the coil with magCoilPseudoDensity variable -->
                  <xsd:attribute name="coil_top_opt" type="xsd:boolean" use="optional" default="false" />
                </xsd:complexType>
              </xsd:element>
            </xsd:choice>
            
            <!-- Resistance of coil (given explicitly) -->
            <xsd:element name="resistance" minOccurs="0">
              <xsd:complexType>
                <xsd:attribute name="value" type="xsd:token" use="required"/>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
          <xsd:attribute name="id" type="xsd:token" default="1"/>
        </xsd:complexType>
      </xsd:element>
      <!-- end of part definition -->
    </xsd:sequence>

    <!-- Identifier string to address the coil for results -->
    <xsd:attribute name="id" type="xsd:token" use="required"/>
  </xsd:complexType>

</xsd:schema>
